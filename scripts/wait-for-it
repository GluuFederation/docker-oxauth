#! /usr/bin/python2
# -*- coding: utf-8-unix -*-

# Checks waits for the following to happen before moving on to the
# passed command:
#
# - consul is up and populated
# - ldap is up and populated
#
# author: torstein@escenic.com

import base64
import consulate
import ldap3
import logging as log
import os
import pyDes
import requests
import sys
import time

GLUU_LDAP_URL = os.environ.get("GLUU_LDAP_URL", "ldap:1636")
GLUU_KV_HOST = os.environ.get("GLUU_KV_HOST", "localhost")
GLUU_KV_PORT = os.environ.get("GLUU_KV_PORT", 8500)

MAX_WAIT_SECONDS = 300
SLEEP_DURATION = 5
LAST_CONSUL_KEY = "gluu/config/oxauth_openid_jwks_fn"


def wait_for_consul_to_be_up_and_populated(consul):
    for i in range(0, MAX_WAIT_SECONDS, SLEEP_DURATION):
        try:
            value = consul.kv.get(LAST_CONSUL_KEY)

            if value is None:
                log.warn(
                    "Consul not populated yet, waiting for key=" +
                    LAST_CONSUL_KEY
                )
            else:
                log.info("Consul is populated :-)")
                return 0

        except requests.exceptions.ConnectionError:
            log.warn(
                "Consul not up yet, retrying in {} seconds".format(SLEEP_DURATION)
            )
        time.sleep(SLEEP_DURATION)

    log.error("Consul not ready, after " + str(MAX_WAIT_SECONDS) + " seconds.")
    sys.exit(1)


def get_ldap_password(consul):
    encoded_password = consul.kv.get("gluu/config/encoded_ox_ldap_pw")
    encoded_salt = consul.kv.get("gluu/config/encoded_salt")
    cipher = pyDes.triple_des(
        b"{}".format(encoded_salt),
        pyDes.ECB,
        padmode=pyDes.PAD_PKCS5
    )
    encrypted_text = b"{}".format(base64.b64decode(encoded_password))
    return cipher.decrypt(encrypted_text)


def wait_for_ldap_to_be_up_and_initialised(consul):
    ldap_bind_dn = consul.kv.get("gluu/config/ldap_binddn")
    ldap_password = get_ldap_password(consul)

    ldap_host = GLUU_LDAP_URL.split(":")[0]
    ldap_port = int(GLUU_LDAP_URL.split(":")[1])

    ldap_server = ldap3.Server(
        ldap_host,
        ldap_port,
        use_ssl=True
    )
    log.warn(
        "LDAP trying ldaps://" + str(GLUU_LDAP_URL) +
        " ldap_bind_dn=" + ldap_bind_dn
    )

    # check the entries few times, to ensure OpenDJ is running after importing
    # initial data; this may not required for OpenLDAP
    successive_entries_check = 0

    for i in range(0, MAX_WAIT_SECONDS, SLEEP_DURATION):
        try:
            with ldap3.Connection(
                    ldap_server,
                    ldap_bind_dn,
                    ldap_password) as ldap_connection:

                ldap_connection.search(
                    search_base="o=gluu",
                    search_filter="(oxScopeType=openid)",
                    search_scope=ldap3.SUBTREE,
                    attributes=['*']
                )

                if successive_entries_check >= 3:
                    log.info("LDAP is up and populated :-)")
                    return 0

                if ldap_connection.entries:
                    successive_entries_check += 1

        except Exception as exc:
            log.warn(
                "LDAP not yet initialised: {}; retrying in {} seconds".format(
                    exc, SLEEP_DURATION,
                )
            )
        time.sleep(SLEEP_DURATION)

    log.error("LDAP not ready, after " + str(MAX_WAIT_SECONDS) + " seconds.")
    sys.exit(1)


def execute_passed_command(command_list):
    log.info(
        "Now executing the arguments passed to " +
        sys.argv[0] +
        ": " +
        " ".join(command_list)
    )
    os.system(" ".join(command_list))


def configure_logger():
    # When debugging wait-for-it, set level=log.DEBUG or pass
    # --log=DEBUG on the command line.
    log.basicConfig(
        level=log.INFO,
        format='%(asctime)s [%(levelname)s] [%(filename)s] - %(message)s'
    )


if __name__ == "__main__":
    configure_logger()

    log.info(
        "Hi world, waiting for Consul & LDAP to be ready before " +
        "running " + " ".join(sys.argv[1:])
    )
    consul = consulate.Consul(host=GLUU_KV_HOST, port=GLUU_KV_PORT)
    wait_for_consul_to_be_up_and_populated(consul)
    wait_for_ldap_to_be_up_and_initialised(consul)
    execute_passed_command(sys.argv[1:])
